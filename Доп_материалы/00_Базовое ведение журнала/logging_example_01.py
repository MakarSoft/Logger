# Example 1
# logging_example_01.py

#  Самый простой пример использование модуля logging
# https://coderzcolumn.com/tutorials/python/logging-simple-guide-to-log-events-in-python

# ... как мы можем использовать методы модуля logging для регистрации сообщений
# для небольших приложений
#
# import logging    # !!!!
# С импортированным модулем ведения журнала вы можете использовать нечто,
# называемое "РЕГИСТРАТОРОМ", для регистрации сообщений, которые вы хотите
# видеть.

# По умолчанию существует 5 стандартных уровней критичности событий.
# У каждого есть соответствующий метод, который можно использовать для
# регистрации событий на этом уровне критичности.
# Итак, модуль logging ведения журнала предоставляет 5 методов для регистрации
# 5-и различных типов сообщений журнала.
# debug(msg)        - помогает регистрировать сообщения, которые будут
#                     использоваться разработчиками только для отладки
#                     приложений в случае сбоя.
# info (msg)        - помогает регистрировать сообщения, которые будут
#                     содержать информацию о нормальной работе приложения,
#                     например об успешном завершении функций и т. д.
# warning(msg)      - помогает регистрировать сообщения, информирующие
#                     о каком-то неожиданном поведении или о возникновении
#                     какой-то проблемы, но она имеет не такой высокий
#                     приоритет и может быть обработано позже - это не
#                     повлияет на нормальное выполнение приложения.
# error(msg)        - помогает регистрировать сообщения, указывающие на
#                     серьезный сбой, который может помешать нормальной
#                     работе приложения и требует срочного внимания.
#                     Сообщает о сбое некоторых функций приложения.
# Critical (msg)    - помогает регистрировать сообщения, указывающие на то,
#                     что приложение столкнулось с фатальной ошибкой и,
#                     возможно, не сможет продолжить нормальную работу.
#                     Это потребует немедленного внимания.
# Модуль logging  внутренне присвоил числовое значение каждому типу
# критичности сообщения журнала:
#        CRITICAL — 50,
#        ERROR    — 40,
#        WARNING  — 30,
#        INFO     — 20,
#        DEBUG    — 10,
#        NOTSET   — 0.
# Это значение обычно называется уровнем журнала.
# Регистраторы обычно отображают сообщения, уровень которых соответствует
# установленному уровню или превышает его.
# Уровень журнала по умолчанию, установленный модулем logging — WARNING,
# поэтому по умолчанию он будет печатать только предупреждения, ошибки и
# критические сообщения.
#
# Модуль logging ведения журнала предоставляет вам регистратор по умолчанию,
# который позволяет начать работу без необходимости выполнять большую
# настройку.
# Соответствующие методы для каждого уровня можно вызывать, как показано в
# следующем примере сразу после импорта модуля:
#
#        import logging
#
#        logging.debug('This is a debug message')
#        logging.info('This is an info message')
#        logging.warning('This is a warning message')
#        logging.error('This is an error message')
#        logging.critical('This is a critical message')
#
# В рамках первого примера будет показано, как можно записывать сообщения в
# стандартный вывод.

# Предтавлена простая ф-ция addition(a,b), который принимает два значения
# параметра, складывает их, предварительно преобразовав к типу float и
# возвращает результат.
# Суммирования производится в блоке try-except, чтобы перехватывать исключение.
# В функцию добавили три разных типа сообщений (DEBUG, INFO и ERROR).
# Затем мы вызываем функцию сложения с различными типами аргументов, чтобы
# увидеть, как выводятся сообщения.
# Печатаются только сообщение журнала типа ERROR и не печатал сообщения журнала
# INFO и DEBUG.
# Причина этого в том, что модуль ведения журнала по умолчанию настроен на
# печать сообщений с уровнем WARNING и выше.
# Формат сообщения по умолчанию, предоставляемый logging,
# log_level:logger_name:log_message.
# Сначала выводится уровень журнала ERROR, затем имя регистратора как root и,
# наконец, сообщение журнала.
# 10 + 20 = 30.0
#
# 20 + 20 = 40.0
#
# ERROR:root:Error Type : ValueError, Error Message : could not convert string to float: 'A'
# A + 20 = None
#
# Вывод показывает уровень критичности перед каждым сообщением вместе с именем
# root, которое модуль ведения журнала дает своему регистратору по умолчанию.
# Этот формат, который показывает уровень, имя и сообщение, разделенные
# двоеточием ( :), является форматом вывода по умолчанию, который можно
# настроить для включения таких элементов, как метка времени, номер строки
# и другие данные.
#
# Обратите внимание, что сообщения debug() и info() не регистрируются.
# Это связано с тем, что по умолчанию модуль ведения журнала регистрирует
# сообщения с уровнем критичности не ниже WARNING.
# Это можно изменить, настроив модуль ведения журнала для регистрации событий
# всех уровней.
# Также можете определить свои собственные уровни критичности, изменив
# конфигурации, но обычно это не рекомендуется, поскольку это может привести
# к путанице с журналами некоторых сторонних библиотек, которые вы можете
# использовать.
#
# Можно использовать метод для настройки ведения журнала: basicConfig(**kwargs)
#     level:    корневой регистратор будет установлен на указанный уровень
#               серьезности.
#     filename: указывает файл.
#     filemode: если указан параметр filename, файл открывается в этом режиме.
#               По умолчанию используется 'a', что означает добавление.
#     format:   это формат сообщения журнала.
# Например:
#     logging.basicConfig(
#             level=logging.DEBUG,
#             filename='app.log',
#             filemode='w',
#             format='%(name)s - %(levelname)s - %(message)s'
#     )
#
# Режим файла filemode установлен на 'w', что означает, что файл журнала
# открывается в "режиме записи" при каждом вызове basicConfig(),
# и каждый запуск программы перезаписывает файл (Конфигурация по умолчанию
# для файлового режима  filemode='a' - это добавление).
# https://docs.python.org/3/library/logging.html#logging.basicConfig
#
# Следует отметить, что вызов logging.basicConfig() для настройки корневого
# регистратора работает только в том случае, если корневой регистратор не был
# настроен ранее. По сути, эту функцию можно вызвать только один раз.
# Методы debug(), info(), warning(), error(), critical() - также автоматически
# вызывать basicConfig() без аргументов, если он не был вызван ранее.
# Это означает, что после первого вызова одного из вышеперечисленных методов вы
# больше не можете настраивать корневой регистратор, потому что он неявно
# вызвал бы функцию basicConfig().


import logging
from typing import Any, Optional

# def addition(a, b):
#     logging.debug("Inside Addition Function")
#     try:
#         result = float(a) + float(b)
#         logging.info("Addition Function Completed Successfully")
#         return result
#     except Exception as e:
#         logging.error(
#             "Error Type : {}, Error Message : {}".format(type(e).__name__, e)
#         )
#         return None


def addition(a: Any, b: Any) -> Optional[float]:

    logging.debug(" Inside Addition Function")
    result: Optional[float] = None

    try:
        result = float(a) + float(b)
        logging.info(" Addition Function Completed Successfully")
    except Exception as e:
        logging.error(
            " Error Type = {}; Error Message = {}".format(type(e).__name__, e)
        )
    finally:
        return result


# ##############################################################################

if __name__ == "__main__":
    a, b = 10, 20
    result = addition(a, b)
    print("{} + {} = {}\n".format(a, b, result))

    a, b = "20", 20
    result = addition(a, b)
    print("{} + {} = {}\n".format(a, b, result))

    a, b = "A", 20
    result = addition(a, b)
    print("{} + {} = {}".format(a, b, result))
